{"version":3,"sources":["webpack:///./src/templates/postList.jsx","webpack:///./src/components/PostListCard/index.jsx"],"names":["Container","styled","div","LinkContainer","PostList","post","data","allMdx","pageContext","next","prev","currentPage","postTag","useState","nodes","posts","nextLink","prevLink","path","title","map","item","index","key","frontmatter","to","TagsData","require","Heading","Title","h4","MetaData","TagContainer","PostListCard","slug","subtitle","date","tags","style","textDecoration","color","tag","tagProperty","filter","bgColor","fontColor"],"mappings":"4FAAA,4FAQMA,EAAYC,IAAOC,IAAV,sEAAGD,CAAH,uFASTE,EAAgBF,IAAOC,IAAV,0EAAGD,CAAH,iDAmEJG,UA5DE,SAAC,GAAsC,IAAxBC,EAAuB,EAApCC,KAAMC,OAAaC,EAAiB,EAAjBA,YAC7BC,EAAiCD,EAAjCC,KAAKC,EAA4BF,EAA5BE,KAAKC,EAAuBH,EAAvBG,YAAYC,EAAWJ,EAAXI,QADwB,EAE5BC,mBAASR,EAAKS,OAAhCC,EAF8C,KAGjDC,GAHiD,KAGtC,KACXC,EAAuB,OAAZL,EAAmB,IAAnB,OAAgCA,EAC3CM,EAAoB,OAAZN,EAAmB,QAAnB,OAAoCA,EAYhD,OAVGF,GACEC,EAAc,IACfM,EAAWC,GAAQP,EAAY,IAGhCF,IACDO,EAAWE,GAAQP,EAAY,IAI1B,kBAAC,IAAD,KACL,kBAAC,IAAD,CAAKQ,MAAM,SACX,kBAACnB,EAAD,KAEEe,EAAMK,KAAI,SAACC,EAAKC,GACd,OAAO,kBAAC,IAAD,eAAcC,IAAKD,GAAWD,EAAKG,YAAiBhB,OAG/D,kBAACL,EAAD,KACIO,EAAO,kBAAC,OAAD,CAAMe,GAAIR,GAAV,QAAkC,GACzCR,EAAO,kBAAC,OAAD,CAAMgB,GAAIT,GAAV,QAAkC,Q,kCCnDjD,6DAKMU,EAAWC,EAAQ,QAEnB3B,EAAYC,IAAOC,IAAV,8EAAGD,CAAH,6KAYT2B,EAAU3B,IAAOC,IAAV,4EAAGD,CAAH,yCAKP4B,EAAQ5B,IAAO6B,GAAV,0EAAG7B,CAAH,oEAQL8B,EAAW9B,IAAOC,IAAV,6EAAGD,CAAH,yCAKR+B,EAAe/B,IAAOC,IAAV,iFAAGD,CAAH,kCAmCHgC,IA9BM,SAAC,GAAqC,IAApCd,EAAmC,EAAnCA,MAAMe,EAA6B,EAA7BA,KAAKC,EAAwB,EAAxBA,SAASC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,KAC/C,OACE,kBAAC,OAAD,CAAMZ,GAAE,IAAMS,EAAQI,MAAO,CAACC,eAAe,OAAOC,MAAO,YAC3D,kBAACxC,EAAD,KACA,kBAAC4B,EAAD,KACC,kBAACC,EAAD,KAAQV,GACR,2BAAIgB,IAEL,kBAACJ,EAAD,KACC,2BAAIK,GACJ,kBAACJ,EAAD,KACCK,EAAKjB,KAAI,SAACqB,EAAInB,GACd,IAAIoB,EAAchB,EAASiB,QAAO,SAACtB,GAAD,OAAUA,EAAKoB,MAAQA,KACrDG,EAAU,GACVC,EAAY,GAKhB,OAJIH,IACHE,EAAUF,EAAY,GAAGE,QACtBC,EAAYH,EAAY,GAAGG,WAExB,kBAAC,IAAD,CAAWtB,IAAKD,EAAOH,MAAOsB,EAAKG,QAASA,EAASC,UAAWA","file":"component---src-templates-post-list-jsx-ea3023d639a1a1bd772e.js","sourcesContent":["import React,{useState} from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport Layout from \"../components/Layout\"\r\nimport SEO from \"../components/seo\"\r\nimport { graphql } from \"gatsby\"\r\nimport PostListCard from '../components/PostListCard'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin: 20px 0px;\r\n  padding:0px 10px;\r\n  width: 90%;\r\n  @media (max-width: 1000px) {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst LinkContainer = styled.div`\r\n   display: flex;\r\n   justify-content: space-between;\r\n`\r\n\r\n\r\n\r\nconst PostList = ({data:{allMdx:post},pageContext}) => {\r\n  const {next,prev,currentPage,postTag} = pageContext\r\n  const [posts,setPosts] = useState(post.nodes)\r\n  let nextLink = '/'\r\n  let prevLink = postTag === '//' ? '/' : `tag/${postTag}`\r\n  let path =  postTag === '//' ? 'page/' : `tag/${postTag}` \r\n  \r\n  if(prev){\r\n    if(currentPage > 2){\r\n      prevLink = path + (currentPage-1)\r\n    }\r\n  }\r\n  if(next){\r\n    nextLink = path + (currentPage+1)\r\n  }\r\n\r\n\r\n  return(<Layout>\r\n    <SEO title=\"Home\" />\r\n    <Container>\r\n    {\r\n      posts.map((item,index) => {\r\n        return <PostListCard key={index} {...item.frontmatter} {...pageContext} />\r\n      })\r\n    }\r\n    <LinkContainer>\r\n      { prev ? <Link to={prevLink}>Prev</Link> : '' }\r\n      { next ? <Link to={nextLink}>Next</Link> : '' }\r\n    </LinkContainer>\r\n    </Container>\r\n     \r\n  </Layout>\r\n  )\r\n}\r\n\r\n\r\nexport const pageQuery = graphql`\r\n  query pageQuery($skip: Int!, $limit: Int!, $postTag: String){\r\n    allMdx(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n      filter: { frontmatter: {tags: {regex: $postTag}}}\r\n    ){\r\n      nodes{\r\n        frontmatter\r\n        {\r\n          title,\r\n          subtitle,\r\n          slug,\r\n          date,\r\n          tags\r\n        }\r\n        timeToRead\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n\r\nexport default PostList\r\n","import React from \"react\"\r\nimport styled from 'styled-components'\r\nimport { Link } from \"gatsby\"\r\nimport TagButton from '../TagButton'\r\n\r\nconst TagsData = require('../../TagsData')\r\n\r\nconst Container = styled.div`\r\n\tdisplay:flex;\r\n\tjustify-content: space-between;\r\n\talign-items:baseline;\r\n\tpadding:40px 10px;\r\n\tflex-wrap:wrap;\r\n\tborder-bottom: 1px dotted #303030;\r\n\t&:hover{\r\n\t\tbackground-color:aliceblue;\r\n\t};\r\n`\r\n\r\nconst Heading = styled.div`\r\n\tdisplay:flex;\r\n\tflex-direction:column;\r\n`\r\n\r\nconst Title = styled.h4`\r\n\tmargin-top:0;\r\n\tfont-size:30px;\r\n\tborder-bottom:0px;\r\n\tfont-weight:900;\r\n\r\n`\r\n\r\nconst MetaData = styled.div`\r\n\tdisplay:flex;\r\n\tflex-direction:column;\r\n`\r\n\r\nconst TagContainer = styled.div`\r\n\tdisplay:flex;\r\n\tflex-wrap:wrap;\r\n`\r\n\r\nconst PostListCard = ({title,slug,subtitle,date,tags}) => {\r\n\treturn (\r\n\t\t\t<Link to={`/${slug}`} style={{textDecoration:'none',color: 'inherit'}}>\r\n\t\t\t<Container>\r\n\t\t\t<Heading>\r\n\t\t\t\t<Title>{title}</Title>\r\n\t\t\t\t<p>{subtitle}</p>\t\r\n\t\t\t</Heading>\r\n\t\t\t<MetaData>\r\n\t\t\t\t<b>{date}</b>\r\n\t\t\t\t<TagContainer>\r\n\t\t\t\t{tags.map((tag,index) => {\r\n\t\t\t\t\tlet tagProperty = TagsData.filter((item) => item.tag === tag)\r\n\t\t\t\t\tlet bgColor = ''\r\n\t\t\t\t\tlet fontColor = ''\r\n\t\t\t\t\tif (tagProperty){\r\n\t\t\t\t\t\tbgColor = tagProperty[0].bgColor\r\n\t\t\t\t\t    fontColor = tagProperty[0].fontColor\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn <TagButton key={index} title={tag} bgColor={bgColor} fontColor={fontColor} />\r\n\t\t\t\t\t}\r\n\t\t\t\t)}\r\n\t\t\t\t</TagContainer>\r\n\t\t\t</MetaData>\r\n\t\t\t</Container>\r\n\t\t\t</Link>\r\n\t\t)\r\n}\r\n\r\n\r\nexport default PostListCard"],"sourceRoot":""}